# arrays-Copy

一、首先，要了解数组是对象。看看下面的代码：**
int[] scores1={23,45,64,34,76,87,37,58,95,88};
int[] scores2=scores1;
上面的并不是数组的复制，只是将scores1参考的数组对象，也给scores2参考。

二、真正的数组复制，基本做法是要另行建立新的数组。
（注意：Java中创建数组的格式------>数组类型[] 数组名 = new 数组类型[ 数组的长度] ）

【示范基本类型数组】
（1）方法一：（普通版）
解释：自行使用循环做值的复制：建立一个长度与scores1相同的新数组，再逐一访问scores1的每个
索引元素，并指定给scores2对应的索引位置上。

int[] scores1={23,45,64,34,76,87,37,58,95,88};
        int[] scores2=new int[scores1.length];//创建了新的数组
        for(int i=0;i<scores1.length;i++){
            scores2[i]=scores1[i];
        }
        
（2）方法二：（进阶版）
解释：使用System.arraycopy()方法，这个方法会使用原生方式复制每个索引元素，相比方法一，不用
自行使用循环做值的复制，所以速度快于方法一。

        int[] scores1={23,45,64,34,76,87,37,58,95,88};
        int[] scores2=new int[scores1.length];//创建了新的数组
        System.arraycopy(scores1,0,scores2,0,scores1.length);
        //System.arraycopy()的5个参数分别是原数组，原数组的起始索引，新的数组，新数组的起始索         //引，复制长度          

（3）方法三：（最优版）
解释：如果使用JDK6以上，Array.copyOf()方法，对于数组复制更为便利，不用建立新数组，该方法会
帮你建立。

int[] scores1={23,45,64,34,76,87,37,58,95,88};
int[] scores2=Array.copyOf(scores1,scores1.length);
//Array.copyOf()方法中的两个参数分别是原数组名，指定建立的新数组的长度

【示范类类型声明的数组】
1、Eg：浅层复制

public class Clothes {
    String color;
    char size;
   Clothes(String color,char size){
       this.color=color;
       this.size=size;
   }
}
class ShallowCopy{
    public static void main(String[] args) {
        Clothes[] c1={new Clothes("red",'L'),new Clothes("blue",'S')};
        Clothes[] c2=new Clothes[c1.length];
        //下面只是浅层复制，只复制了参考对象
        for(int i=0;i<c1.length;i++){
            c2[i]=c1[i];
        }
        c1[0].color="black";//通过c1修改索引0的对象
        System.out.println(c2[0].color);//通过c2取得索引0对象的颜色
    }

运行结果：

black

解释：
实际上循环中仅将c1每个索引处所参考的对象，也给c2每个索引来参考，并没有实际复制出 Clothes 对象，这叫作***复制参考***，或称这个行为是***浅层复制(Shallow Copy)***。 无论System. arraycopy()还是Arrays .copyOf(),用在类类型声明的数组时，都是执行浅层复制。如果真的要连同对象一同复制， 用户得自行操作，因为基本上只有自己知道，每个对象复制时有哪些属性必须复制。例如:

2、Eg：深层复制

public class Clothes2 {
    String color;
    char size;
   Clothes2(String color,char size){
       this.color=color;
       this.size=size;
   }
}
class DeepCopy{
    public static void main(String[] args) {
        Clothes[] c1={new Clothes("red",'L'),new Clothes("blue",'S')};
        Clothes[] c2=new Clothes[c1.length];
        for(int i=0;i<c1.length;i++){
            Clothes2 c=new Clothes2(c1[i].color,c1[i].size);//自行复制元素
            c2[i]=c;
        }
        c1[0].color="black";
        System.out.println(c2[0].color);
    }
}

运行结果：
red
